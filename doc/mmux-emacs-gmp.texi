\input texinfo.tex
@c %**start of header
@setfilename mmux-emacs-gmp.info
@settitle MMUX Emacs GMP
@c %**end of header

@include version.texi
@include macros.texi

@c page
@c ------------------------------------------------------------
@c Values.
@c ------------------------------------------------------------

@set TITLE                      MMUX Emacs GMP

@c To be used as @value{PACKAGE} whenever we need to include the full
@c name of this package.
@set PACKAGE                    MMUX Emacs GMP

@c To be used as @value{PACKAGE} whenever we need to include the
@c nickname of the project: the name that is used to compose the
@c distribution tarball or the web address.
@set PACKAGE_NICKNAME           mmux-emacs-gmp

@c To be used as @value{AUTHOR} whenever we need to include the list of
@c authors of this document.
@set AUTHOR                     Marco Maggi

@c To be used as @value{AUTHOR_EMAIL} whenever we need to include the
@c email of the *single* author of this document.
@set AUTHOR_EMAIL               @email{mrc.mgg@@gmail.com}

@c To be used as @value{COPYRIGHT_YEARS} whenever we need to include the
@c list of copyright years.
@set COPYRIGHT_YEARS            2020

@c ------------------------------------------------------------

@set PackageAutoconfPrefix              MMUX_EMACS_GMP
@set PackagePkgconfigModule             @code{mmux-emacs-gmp}
@set PackageLibsVar                     @env{MMUX_EMACS_GMP_LIBS}
@set PackageCflagsVar                   @env{MMUX_EMACS_GMP_CFLAGS}

@set PackageLibstem                     @file{mmux-emacs-gmp}
@set PackageSharedLibraryBasename       @file{libmmux-emacs-gmp}

@set PackageEmacsModule                 @file{mmux-emacs-gmp}
@set PackageHeader                      mmux-emacs-gmp.h
@set PackageHeaderFile                  @file{@value{PackageHeader}}

@set PackageApiCPrefixLower             mmux_emacs_gmp_
@set PackageApiCPrefixUpper             MMUX_EMACS_GMP_
@set PackageApiElispPrefix              mmux-gmp-

@set GithubUrl                 @url{https://github.com/marcomaggi/@value{PACKAGE_NICKNAME}}
@set BitbucketUrl              @url{https://bitbucket.org/marcomaggi/@value{PACKAGE_NICKNAME}}
@set DownloadUrl               @url{https://bitbucket.org/marcomaggi/@value{PACKAGE_NICKNAME}/downloads}
@set DocumentationUrl          @url{https://marcomaggi.github.io/docs/@value{PACKAGE_NICKNAME}.html}

@c page
@c ------------------------------------------------------------
@c Local macros.
@c ------------------------------------------------------------

@macro gmpref{NODE, TITLE}
@xref{\NODE\,\TITLE\,\TITLE\,gmp}
@end macro

@c page
@c ------------------------------------------------------------
@c Copyright notice.
@c ------------------------------------------------------------

@copying
This document describes version @value{VERSION} of @value{PACKAGE}, a @gnu{} Emacs module
implemented on top of a C11 language library, providing an interface to the @gmp{} library.

The library supports @posix{} platforms.  This package is meant to work with @gnu{} Emacs version
26+.  This package depends upon the external packages: @samp{cl-lib}.  To run the test suite: this
package requires the ERT package.

This package is distributed under the terms of the @gnu{} General Public License (@gpl{}).

The latest release can be downloaded from:

@center @value{DownloadUrl}

@noindent
development takes place at:

@center @value{GithubUrl}

@noindent
and as backup at:

@center @value{BitbucketUrl}

@noindent
Copyright @copyright{} @value{COPYRIGHT_YEARS} by @value{AUTHOR} @value{AUTHOR_EMAIL}@*

@quotation
Permission is granted to copy, distribute and/or modify this document under the terms of the @gnu{}
Free Documentation License, Version 1.3 or any later version published by the Free Software
Foundation; with Invariant Sections being ``@gnu{} Free Documentation License'' and ``@gnu{} General
Public License'', no Front--Cover Texts, and no Back--Cover Texts.  A copy of the license is
included in the section entitled ``@gnu{} Free Documentation License''.
@end quotation
@end copying

@c page
@c ------------------------------------------------------------
@c Headers.
@c ------------------------------------------------------------

@titlepage
@title @value{TITLE}
@subtitle Revision @value{VERSION}
@author @value{AUTHOR} @value{AUTHOR_EMAIL}
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@c ------------------------------------------------------------

@ifinfo
@dircategory Development
@direntry
* mmux-emacs-gmp: (mmux-emacs-gmp).       MMUX Emacs GMP, an interface to GMP.
@end direntry
@end ifinfo

@c ------------------------------------------------------------

@ignore
@syncodeindex tp cp
@syncodeindex vr cp
@syncodeindex fn cp
@end ignore

@c page
@ifnottex
@node Top
@top @value{TITLE}

@insertcopying

@menu
* overview::                    Overview of the package.
* version::                     Version functions.
* integers::                    Exact integer objects and operations.
* rationals::                   Rational number objects and operations.
* floats::                      Floating-point number objects and operations.

Appendices

* Package License::             GNU General Public License.
* Documentation License::       GNU Free Documentation License.
* references::                  Bibliography and references.

Indexes

* concept index::               An entry for each concept.
* function index::              An entry for each function.
* variable index::              An entry for each variable.
* type index::                  An entry for each type.

External documents

* modules: (elisp)Writing Dynamic Modules.
@end menu
@end ifnottex

@c page
@node overview
@chapter Overview of the package


This document describes version @value{VERSION} of @value{PACKAGE}, a @gnu{} Emacs module
implemented on top of a C11 language library, providing an interface to the @gmp{} library.

The library supports @posix{} platforms.  This package is meant to work with @gnu{} Emacs version
26+.  This package depends upon the external packages: @samp{cl-lib}.  To run the test suite: this
package requires the ERT package.

@value{PACKAGE} installs a single elisp module @value{PackageEmacsModule} and a C language shared
library with basename @value{PackageSharedLibraryBasename} (using the @gnu{} Libtool
infrastructure).  All the elisp definition names are prefixed with
@code{@value{PackageApiElispPrefix}}.  The C language shared library is installed under
@samp{$libdir}, for example:

@center @file{/usr/local/lib64}

@noindent
while the elisp module goes under @samp{$lispdir}, for example:

@center @file{/usr/local/share/emacs/site-lisp}

@noindent
so to load the module (under an Emacs installation with dynamic modules enabled) we should do
something like:

@lisp
(add-to-list 'load-path "/usr/local/lib64"
                        "/usr/local/share/emacs/site-lisp")
(require 'mmux-emacs-gmp)
@end lisp

@cindex @value{PackageHeaderFile}, header file
@cindex Header file @value{PackageHeaderFile}
It might be possible that we want to write a C language library making use of the facilities of this
package; so @value{PACKAGE} installs the single header file @value{PackageHeaderFile}.  All the C
language function names in the @api{} are prefixed with @code{@value{PackageApiCPrefixLower}}; all
the C language preprocessor symbol names are prefixed with @code{@value{PackageApiCPrefixUpper}};
all the type names are prefixed with @code{@value{PackageApiCPrefixLower}} and suffixed with
@code{_t}.

@menu
* overview linking::            Linking code with the library.
@end menu

@include overview-linking.texi

@c page
@node version
@chapter Version functions


The installed libraries follow version numbering as established by the @gnu{} Autotools.  For an
explanation of interface numbers as managed by @gnu{} Libtool @xref{Libtool versioning, interface,
Libtool's versioning system, libtool, Shared library support for @gnu{}}.


@defun mmux-gmp-version-string
Return a string representing the interface version number.
@end defun


@defun mmux-gmp-version-interface-current
Return an integer representing the library interface current number.
@end defun


@defun mmux-gmp-version-interface-revision
Return an integer representing the library interface current revision number.
@end defun


@defun mmux-gmp-version-interface-age
Return an integer representing the library interface current age.
@end defun


@deftypefun {char const *} mmux_emacs_gmp_version_string (void)
Return a pointer to a statically allocated @asciiz{} string representing the interface version
number.
@end deftypefun


@deftypefun int mmux_emacs_gmp_version_interface_current (void)
Return an integer representing the library interface current number.
@end deftypefun


@deftypefun int mmux_emacs_gmp_version_interface_revision (void)
Return an integer representing the library interface current revision number.
@end deftypefun


@deftypefun int mmux_emacs_gmp_version_interface_age (void)
Return an integer representing the library interface current age.
@end deftypefun

@c page
@node integers
@chapter Exact integer objects and operations


@deftp {Object Type} mmux-gmp-mpz
Type of structures representing a multiple precision exact integer.  It is a wrapper for the
@objtype{mpz_t} object.  These objects, and their internal representation, are correctly garbage
collected.
@end deftp


@menu
* integers allocation::         Allocating exact integers.
* integers predicates::         Exact integer predicates.
* integers assignment::         Assigning values to objects.
* integers conversion::         Converting exact integers to
                                other objects.
@end menu

@c page
@node integers allocation
@section Allocating exact integers


@defun make-mmux-gmp-mpz
Build and return a new @objtype{mmux-gmp-mpz} object instance.  When called with no arguments: the
object is uninitialised.
@end defun

@c page
@node integers predicates
@section Exact integer predicates


@defun mmux-gmp-mpz-p @var{obj}
Return true if @var{obj} is an instance of @objtype{mmux-gmp-mpz}; otherwise return false.

@lisp
(mmux-gmp-mpz-p (make-mmux-gmp-mpz))    @result{} t
(mmux-gmp-mpz-p 123)                    @result{} nil
@end lisp
@end defun

@c page
@node integers assignment
@section Assigning values to objects


@defun mpz-set @var{rop} @var{op}
Assign the value of @var{op} to @var{rop}; both the operands must be of type @objtype{mmux-gmp-mpz}.

@lisp
(defconst rop (make-mmux-gmp-mpz))
(defconst op  (make-mmux-gmp-mpz))
(mpz-set-si rop 123)
(mpz-set    op rop)
(mpz-get-str 10 op)     @result{} "123"
@end lisp
@end defun


@defun mpz-set-si @var{rop} @var{int}
Assign the value of an exact integer object to an @objtype{mmux-gmp-mpz} object.

@lisp
(defconst rop (make-mmux-gmp-mpz))
(mpz-set-si rop 123)
(mpz-get-str 10 op)     @result{} "123"
@end lisp
@end defun


@defun mpz-set-d @var{rop} @var{flo}
Assign the value of a floating--point object to an @objtype{mmux-gmp-mpz} object.

@lisp
(defconst rop (make-mmux-gmp-mpz))
(mpz-set-d rop 12.3)
(mpz-get-str 10 rop)    @result{} "12"
@end lisp
@end defun


@defun mpz-set-q @var{rop} @var{op}
Assign the value of an @objtype{mmux-gmp-mpq} object to an @objtype{mmux-gmp-mpz} object.
@end defun


@defun mpz-set-f @var{rop} @var{op}
Assign the value of an @objtype{mmux-gmp-mpf} object to an @objtype{mmux-gmp-mpz} object.
@end defun


@defun mpz-set-str @var{rop} @var{str} @var{base}
Assign the value of a string object to an @objtype{mmux-gmp-mpz} object.  The argument @var{base}
must be an exact integer representing the base of the numeric string representation: @math{0} or a
value between @math{2} and @math{32}.

@lisp
(defconst rop (make-mmux-gmp-mpz))
(mpz-set-str rop "123" 10)
(mpz-get-str 10 rop)    @result{} "123"
@end lisp
@end defun


@defun mpz-swap @vari{op} @varii{op}
Swap the values between two @objtype{mmux-gmp-mpz} objects.

@lisp
(defconst op1 (make-mmux-gmp-mpz))
(defconst op2 (make-mmux-gmp-mpz))
(mpz-set-si op1 123)
(mpz-set-si op2 456)
(mpz-swap op1 op2)
(mpz-get-str 10 op1)  @result{} "456"
(mpz-get-str 10 op2)  @result{} "123"
@end lisp
@end defun

@c page
@node integers conversion
@section Converting exact integers to other objects


@defun mpz-get-str @var{base} @var{op}
Convert an object @var{op} of type @objtype{mmux-gmp-mpz} to a string; return the resulting string.
@var{base} must be an exact integer representing the base of the numeric string representation:
positive between @math{2} and @math{36} or negative between @math{-2} and @math{-36}.

@lisp
(let ((op (make-mmux-gmp-mpz)))
  (mpz-set-si op 15)
  (mpz-get-str  10 op)      @result{} "15"
  (mpz-get-str  16 op)      @result{} "f"
  (mpz-get-str -16 op)      @result{} "F"
  )
@end lisp
@end defun

@c page
@node rationals
@chapter Rational number objects and operations


@deftp {Object Type} mmux-gmp-mpq
Type of structures representing a multiple precision rational numbers.  It is a wrapper for the
@objtype{mpq_t} object.  These objects, and their internal representation, are correctly garbage
collected.
@end deftp


@menu
* rationals allocation::        Allocating rational numbers.
* rationals predicates::        Rational number predicates.
* rationals assignment::        Assigning values to rational
                                number objects.
* rationals conversion::        Converting rational numbers to
                                other objects.
@end menu

@c page
@node rationals allocation
@section Allocating rational numbers


@defun make-mmux-gmp-mpq
Build and return a new @objtype{mmux-gmp-mpq} object instance.  When called with no arguments: the
object is uninitialised.
@end defun

@c page
@node rationals predicates
@section Rational number predicates



@defun mmux-gmp-mpq-p @var{obj}
Return true if @var{obj} is an instance of @objtype{mmux-gmp-mpq}; otherwise return false.

@lisp
(mmux-gmp-mpq-p (make-mmux-gmp-mpq))    @result{} t
(mmux-gmp-mpq-p 123)                    @result{} nil
@end lisp
@end defun

@c page
@node rationals assignment
@section Assigning values to rational number objects


@defun mpq-set @var{rop} @var{op}
Assign the value of @var{op} to @var{rop}; both the operands must be of type @objtype{mmux-gmp-mpq}.
@end defun


@defun mpq-set @var{rop} @var{op}
Assign the value of @var{op} to @var{rop}; both the operands must be of type @objtype{mmux-gmp-mpq}.
@end defun

@c page
@node rationals conversion
@section Converting rational numbers to other objects

@c page
@node floats
@chapter Floating-point number objects and operations


@deftp {Object Type} mmux-gmp-mpf
Type of structures representing a multiple precision floating--point numbers.  It is a wrapper for
the @objtype{mpf_t} object.  These objects, and their internal representation, are correctly garbage
collected.
@end deftp


@menu
* floats allocation::           Allocating floating-point numbers.
* floats predicates::           Floating-point number predicates.
* floats assignment::           Assigning values to floating-point
                                number objects.
* floats conversion::           Converting floating-point numbers to
                                other objects.
@end menu

@c page
@node floats allocation
@section Allocating floating--point numbers


@defun make-mmux-gmp-mpf
Build and return a new @objtype{mmux-gmp-mpf} object instance.  When called with no arguments: the
object is uninitialised.
@end defun

@c page
@node floats predicates
@section Floating--point number predicates


@defun mmux-gmp-mpf-p @var{obj}
Return true if @var{obj} is an instance of @objtype{mmux-gmp-mpf}; otherwise return false.

@lisp
(mmux-gmp-mpf-p (make-mmux-gmp-mpf))    @result{} t
(mmux-gmp-mpf-p 123)                    @result{} nil
@end lisp
@end defun

@c page
@node floats assignment
@section Assigning values to floating--point number objects


@defun mpf-set @var{rop} @var{op}
Assign the value of @var{op} to @var{rop}; both the operands must be of type @objtype{mmux-gmp-mpf}.

@lisp
@end lisp
@end defun


@defun mpf-set-si @var{rop} @var{int}
Assign the value of an exact integer object to an @objtype{mmux-gmp-mpf} object.

@lisp
@end lisp
@end defun


@defun mpf-set-d @var{rop} @var{flo}
Assign the value of a floating--point object to an @objtype{mmux-gmp-mpf} object.

@lisp
@end lisp
@end defun


@defun mpf-set-z @var{rop} @var{op}
Assign the value of an @objtype{mmux-gmp-mpz} object to an @objtype{mmux-gmp-mpf} object.

@lisp
@end lisp
@end defun


@defun mpf-set-q @var{rop} @var{op}
Assign the value of an @objtype{mmux-gmp-mpq} object to an @objtype{mmux-gmp-mpf} object.

@lisp
@end lisp
@end defun


@defun mpf-set-str @var{rop} @var{str} @var{base}
Assign the value of a string object to an @objtype{mmux-gmp-mpf} object.  The argument @var{base}
must be an exact integer representing the base of the numeric string representation: a positive
value between @math{2} and @math{62} or a negative value between @math{-2} and @math{-62}.

@lisp
@end lisp
@end defun


@defun mpf-swap @vari{op} @varii{op}
Swap the values between two @objtype{mmux-gmp-mpf} objects.

@lisp
@end lisp
@end defun

@c page
@node floats conversion
@section Converting floating--point numbers to other objects


@defun mpf-get-str @var{base} @var{op}
Convert an object @var{op} of type @objtype{mmux-gmp-mpf} to a string; return the resulting string.
@var{base} must be an exact integer representing the base of the numeric string representation:
positive between @math{+2} and @math{+62} or negative between @math{-2} and @math{-36}.

@lisp
@end lisp
@end defun

@c page
@c ------------------------------------------------------------
@c Appendices.
@c ------------------------------------------------------------

@include gpl-3.0.texi
@include fdl-1.3.texi

@c page
@node references
@appendix Bibliography and references


The documentation of @value{PACKAGE} is available online:

@center @value{DocumentationUrl}

@noindent
the latest release of this package can be downloaded from:

@center @value{DownloadUrl}

@noindent
development takes place at:

@center @value{GithubUrl}

@noindent
and as backup at:

@center @value{BitbucketUrl}

We can found informations and examples about Emacs modules at the repository mirror, under the
@file{modules} directory:

@center @url{https://github.com/emacs-mirror/emacs}

There is also a list of resources about Emacs modules:

@center @url{https://github.com/emacs-pe/emacs-modules}

@c page
@node concept index
@appendix An entry for each concept

@printindex cp

@node function index
@appendix An entry for each function.

@printindex fn

@node variable index
@appendix An entry for each variable.

@printindex vr

@node type index
@appendix An entry for each type.

@printindex tp

@contents
@bye

@c end of file

